<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!--
  Use the following commands to:

  - check for plugin updates:                     mvn versions:display-plugin-updates
  - check for dependency updates:                 mvn versions:display-dependency-updates
  - generate project report without deployment:   mvn clean compile site
  -->

  <groupId>net.kessra</groupId>
  <artifactId>test-release-pipeline</artifactId>
  <version>${revision}</version>

  <name>test-release-pipeline</name>
  <description>Test project for setting up and testing Github Actions and workflows</description>
  <url>https://github.com/RovoMe/test-release-pipeline</url>

  <inceptionYear>2024</inceptionYear>

  <properties>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
    <maven.compiler.release>17</maven.compiler.release>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <revision>0-SNAPSHOT</revision>
    <junit.version>5.10.2</junit.version>
  </properties>

  <repositories>
    <repository>
      <id>central</id>
      <name>Maven Central</name>
      <url>https://repo.maven.apache.org/maven2/</url>
    </repository>
  </repositories>

  <licenses>
    <license>
      <name>MIT License</name>
      <url>http://www.opensource.org/licenses/mit-license.php</url>
    </license>
  </licenses>

  <scm>
    <connection>scm:git:git@github.com:RovoMe/test-release-pipeline.git</connection>
    <url>https://github.com/RovoMe/test-release-pipeline</url>
    <developerConnection>scm:git:git@github.com:RovoMe/test-release-pipeline.git</developerConnection>
    <tag>HEAD</tag>
  </scm>

  <distributionManagement>
    <site>
      <id>github</id>
      <url>scm:git:https://github.com/RovoMe/test-release-pipeline.git</url>
    </site>
    <!-- Deploy to Maven Central -->
    <repository>
      <id>ossrh</id>
      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
    </repository>
    <snapshotRepository>
      <id>ossrh</id>
      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
    </snapshotRepository>
  </distributionManagement>

  <developers>
    <developer>
      <id>RovoMe</id>
      <name>Roman Vottner</name>
      <roles>
        <role>developer</role>
      </roles>
    </developer>
  </developers>

  <issueManagement>
    <system>GitHub</system>
    <url>https://github.com/RovoMe/test-release-pipeline/issues</url>
  </issueManagement>

  <dependencies>
    <!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>2.0.13</version>
    </dependency>
    <!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic -->
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>1.5.6</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <!-- https://mvnrepository.com/artifact/org.hamcrest/hamcrest -->
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest</artifactId>
      <version>2.2</version>
      <scope>test</scope>
    </dependency>
    <!-- https://mvnrepository.com/artifact/org.mockito/mockito-junit-jupiter -->
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <version>5.11.0</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <!-- Update outdated Maven plugins defined in parent pom -->
    <pluginManagement>
      <plugins>
        <!-- Ignore alpha and beta dependency versions in
             'mvn versions:display-dependency-updates' checks
        -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>versions-maven-plugin</artifactId>
          <version>2.16.2</version>
          <configuration>
            <rulesUri>file://${basedir}/version-rules.xml</rulesUri>
          </configuration>
        </plugin>
        <!-- Ensure everyone using this project has a compatible Maven version
             running -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>3.4.1</version>
          <executions>
            <execution>
              <id>enforce-maven</id>
              <goals>
                <goal>enforce</goal>
              </goals>
              <configuration>
                <rules>
                  <requireMavenVersion>
                    <version>3.6.3</version>
                  </requireMavenVersion>
                </rules>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <!-- Removes generated files during build-time -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.3.2</version>
        </plugin>
        <!-- Adds source files in a separate JAR file -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-source-plugin</artifactId>
          <version>3.3.1</version>
          <executions>
            <execution>
              <id>attach-sources</id>
              <goals>
                <goal>jar</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <!-- compiler settings -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.13.0</version>
          <configuration>
            <source>${maven.compiler.source}</source>
            <target>${maven.compiler.target}</target>
            <release>${maven.compiler.release}</release>
            <compilerArgs>
              <compilerArg>-Xlint:unchecked</compilerArg>
            </compilerArgs>
          </configuration>
        </plugin>
        <!-- Generate javadoc -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>3.6.3</version>
          <configuration>
            <source>${maven.compiler.source}</source>
            <show>protected</show>
            <failOnWarnings>false</failOnWarnings>
            <release>${maven.compiler.release}</release>
            <stylesheet>java</stylesheet>
            <!-- Ignore warnings on undocumented record properties -->
            <additionalJOption>-Xdoclint:-missing</additionalJOption>
          </configuration>
          <executions>
            <execution>
              <id>attach-javadocs</id>
              <goals>
                <goal>jar</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <!-- Handles the copying of project resources to the target directory -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.3.1</version>
          <executions>
            <execution>
              <id>copy-resources</id>
              <phase>install</phase>
              <goals>
                <goal>copy-resources</goal>
              </goals>
              <configuration>
                <outputDirectory>${basedir}/target</outputDirectory>
                <resources>
                  <resource>
                    <directory>src/main/resources</directory>
                    <includes>
                      <include>**/*.properties</include>
                      <include>**/*.yml</include>
                    </includes>
                  </resource>
                </resources>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <!-- Generates a Java archive file from the generated classes including
             test-jar archives -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.4.1</version>
          <configuration>
            <excludes>
              <exclude>**/*.properties</exclude>
            </excludes>
          </configuration>
          <executions>
            <execution>
              <goals>
                <goal>test-jar</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <!-- Copies the generated artifacts to the local maven repository -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-install-plugin</artifactId>
          <version>3.1.1</version>
        </plugin>
        <!-- Deploys the artifact to a remote repository during deploy phase -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>3.1.1</version>
        </plugin>
        <!-- Generates a site for the project based on defined reports in the
             POM
             Prevent the site plugin from deploying to the scm url
             Usage: mvn clean compile site
        -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.12.1</version>
          <executions>
            <execution>
              <id>stage-for-scm-publish</id>
              <phase>post-site</phase>
              <goals>
                <goal>stage</goal>
              </goals>
            </execution>
            <execution>
              <id>default-deploy</id>
              <phase>none</phase>
            </execution>
          </executions>
        </plugin>
        <!-- Publish modified content to SCM (GitHub)
             Usage: mvn -Preporting site site:stage
                    mvn scm-publish:publish-scm
        -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-scm-publish-plugin</artifactId>
          <version>3.9.6</version>
          <configuration>
            <scmBranch>gh-pages</scmBranch>
            <pubScmUrl>scm:git:https://github.com/RovoMe/test-release-pipeline.git</pubScmUrl>
          </configuration>
          <executions>
            <execution>
              <id>scm-publish</id>
              <phase>site-deploy</phase>
              <goals>
                <goal>publish-scm</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <!-- Will create further project related reports -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>3.5.0</version>
        </plugin>
        <!-- Surefire is a test framework project. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>3.2.5</version>
          <!-- Allow reflection access to all third party libraries -->
          <configuration>
            <argLine>
              --illegal-access=permit
            </argLine>
          </configuration>
        </plugin>
        <!-- Failsafe is used to run integration tests -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>3.2.5</version>
        </plugin>
        <!-- Checkstyle ensures that everyone is committing code that is
             following our formatting guidelines -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-checkstyle-plugin</artifactId>
          <version>3.3.1</version>
          <configuration>
            <configLocation>checkstyle.xml</configLocation>
            <consoleOutput>true</consoleOutput>
            <failsOnError>true</failsOnError>
            <linkXRef>false</linkXRef>
          </configuration>
          <executions>
            <execution>
              <id>validate</id>
              <phase>validate</phase>
              <goals>
                <goal>check</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <!-- In order to release the artifact to Maven Central it needs to be
             signed -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-gpg-plugin</artifactId>
          <version>3.2.4</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <!-- Ensures that a Maven version is used that can handle the plugins
           and dependencies listed in this POM -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
      </plugin>
      <!-- Will create a JAR archive of the source files in the current
           project -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
      </plugin>
      <!-- Generate java docs. Required by the Maven Central deployment
           process -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
      </plugin>
      <!-- used to generate a flattend version of the pom.xml as we maintain our
           revision through revision properties which would otherwise be visible
           within the POM -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>flatten-maven-plugin</artifactId>
        <version>1.6.0</version>
        <configuration>
          <updatePomFile>true</updatePomFile>
          <flattenMode>bom</flattenMode>
        </configuration>
        <executions>
          <execution>
            <id>flatten</id>
            <phase>process-resources</phase>
            <goals>
              <goal>flatten</goal>
            </goals>
          </execution>
          <execution>
            <id>flatten.clean</id>
            <phase>clean</phase>
            <goals>
              <goal>clean</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- The Surefire plugin will run all unit tests and report on failed
           tests -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <argLine>
            <!-- Allow access to the tests during test-time -->
            --add-opens test.release.pipeline/net.kessra.test=ALL-UNNAMED
            --illegal-access=deny
          </argLine>
        </configuration>
      </plugin>
      <!-- The Failsafe plugin is designed to run integration tests while the
           Surefire Plugin is designed to run unit tests. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Checkstyle ensures that everyone is committing code that is following
           our formatting guidelines -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
      </plugin>
      <!-- Plugin for deploying artifacts to Maven Central -->
      <plugin>
        <groupId>org.sonatype.central</groupId>
        <artifactId>central-publishing-maven-plugin</artifactId>
        <version>0.4.0</version>
        <extensions>true</extensions>
        <configuration>
          <publishingServerId>central</publishingServerId>
          <tokenAuth>true</tokenAuth>
          <autoPublish>false</autoPublish>
          <waitUntil>published</waitUntil>
          <checksums>all</checksums>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <reporting>
    <plugins>
      <!-- Generates reports information about the project -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-project-info-reports-plugin</artifactId>
        <version>3.5.0</version>
        <reportSets>
          <reportSet>
            <reports>
              <report>index</report>
              <report>dependency-info</report>
              <report>issue-management</report>
              <report>scm</report>
              <report>licenses</report>
              <report>distribution-management</report>
              <report>team</report>
              <report>summary</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
      <!-- Generate Javadoc while reporting -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.6.3</version>
        <inherited>true</inherited>
        <configuration>
          <source>17</source>
          <show>protected</show>
          <failOnWarnings>false</failOnWarnings>
          <release>17</release>
          <stylesheet>java</stylesheet>
        </configuration>
        <reportSets>
          <reportSet>
            <id>html</id>
            <reports>
              <report>javadoc</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
      <!-- Generate surefire reports -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-report-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <showSuccess>true</showSuccess>
          <outputDirectory>${basedir}/target/site</outputDirectory>
          <linkXRef>true</linkXRef>
        </configuration>
      </plugin>
      <!-- Add cross-references from failed tests to the line number in the source code -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jxr-plugin</artifactId>
        <version>3.3.2</version>
      </plugin>
      <!-- Checkstyle report-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <reportSets>
          <reportSet>
            <reports>
              <report>checkstyle</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
      <!-- Generates a changes report based on entries found in src/changes/changes.xml -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-changes-plugin</artifactId>
        <version>2.12.1</version>
        <reportSets>
          <reportSet>
            <reports>
              <report>changes-report</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
      <!-- Generates a report on known bugs found on analyzing the project code -->
      <plugin>
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-maven-plugin</artifactId>
        <version>4.8.4.0</version>
      </plugin>
    </plugins>
  </reporting>
</project>